name: CI/CD & Release

on:
  push:
    branches: [main]

jobs:
  validate:
    name: âœ… Validate Everything (Python ${{ matrix.python-version }})
    env:
      PYTHONWARNINGS: ignore::DeprecationWarning
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    outputs:
      passed: ${{ steps.pass.outputs.ok }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Run full checks
        run: |
          set -e  # Exit immediately if a command exits with a non-zero status
          poetry run pre-commit run --all-files --show-diff-on-failure
          poetry run black --check .
          poetry run ruff check .
          poetry run mypy src/skaven
          poetry run pytest
          poetry run coverage run -m pytest
          poetry run coverage report -m > coverage.txt || echo "Warning: Coverage report failed"
          tail -n 1 coverage.txt > coverage_summary.txt || echo "Warning: Coverage summary failed"

      - name: Mark CI as passed
        id: pass
        if: ${{ success() }}
        run: echo "ok=true" >> $GITHUB_OUTPUT

  release:
    name: ðŸ“¦ Tag and Release
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ needs.validate.outputs.passed == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Bump tag and push
        id: tagger
        run: |
          git fetch --tags
          latest=$(git tag --sort=-v:refname | head -n 1)
          echo "Latest tag: $latest"
          if [[ "$latest" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            next_tag="v$major.$minor.$((patch + 1))"
          else
            next_tag="v0.1.0"
          fi
          echo "Next tag: $next_tag"
          git tag "$next_tag"
          git push origin "$next_tag"
          echo "tag=$next_tag" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tagger.outputs.tag }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
