name: CI/CD & Release

on:
  push:
    branches: [main]

jobs:
  validate:
    name: âœ… Validate Everything
    env:
      PYTHONWARNINGS: ignore::DeprecationWarning
    runs-on: ubuntu-latest
    outputs:
      passed: ${{ steps.pass.outputs.ok }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: poetry install
      - name: Verify Poetry Dependencies
        run: poetry check
      - name: Install pre-commit
        run: |
          poetry add --dev pre-commit
          poetry install
      - name: Run full checks
        run: |
          poetry run black --check .
          poetry run ruff check .
          poetry run mypy src
          poetry run pytest
          poetry run coverage run -m pytest
          poetry run coverage report -m > coverage.txt || echo "Warning: Coverage report failed"
          tail -n 1 coverage.txt > coverage_summary.txt
      - name: Mark CI as passed
        id: pass
        run: |
          echo "ok=true" >> $GITHUB_OUTPUT || exit 1

  release:
    name: ðŸ“¦ Tag and Release
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ needs.validate.outputs.passed == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      - name: Bump tag and push
        id: tagger
        run: |
          git fetch --tags
          latest=$(git tag --sort=-v:refname | head -n 1)
          echo "Latest tag: $latest"
          if [[ "$latest" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            next_tag="v$major.$minor.$((patch + 1))"
          else
            next_tag="v0.1.0"
          fi
          git tag "$next_tag"
          git push origin "$next_tag"
          echo "tag=$next_tag" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tagger.outputs.tag }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Publish to GitHub Packages
        run: |
          poetry config repositories.github https://pypi.pkg.github.com/kpeacocke/skaven
          poetry publish --build -r github -u __token__ -p ${{ secrets.GITHUB_TOKEN }}
        env:
          POETRY_HTTP_BASIC_GITHUB_USERNAME: __token__
          POETRY_HTTP_BASIC_GITHUB_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
