name: Code Quality & Coverage

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: 🧹 Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: "3.9"
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: poetry install
      - name: Run Ruff and Black
        run: |
          poetry run ruff check .
          poetry run black --check .

  typecheck:
    name: 🔍 Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: "3.9"
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: poetry install
      - name: Run Mypy
        run: poetry run mypy src

  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: "3.9"
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: poetry install
      - name: Run Pytest
        run: poetry run pytest

  coverage:
    name: 📊 Coverage
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: "3.9"
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: poetry install
      - name: Run Coverage
        id: cov
        run: |
          poetry run coverage run -m pytest
          poetry run coverage report -m > coverage.txt
          tail -n 1 coverage.txt > coverage_summary.txt
          echo "COVERAGE_SUMMARY<<EOF" >> $GITHUB_ENV
          cat coverage_summary.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Comment Coverage on PR
        uses: actions/github-script@v8
        with:
          script: |
            const summary = process.env.COVERAGE_SUMMARY.trim();
            const comment = `🧪 **Test Coverage Report**\n\`\`\`\n${summary}\n\`\`\``;
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const existing = comments.find(c => c.body.includes('🧪 **Test Coverage Report**'));
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
